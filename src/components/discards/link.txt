


  // at the header



import React, { useState } from 'react';
import ReactDOM from 'react-dom';
import './App.css';

const CARDS = 7;
const MAX_VISIBILITY = 3;

const Card = ({ title, content }) => (
  <div className="card">
    <h2>{title}</h2>
    <p>{content}</p>
  </div>
);

const Carousel = ({ children }) => {
  const [active, setActive] = useState(2);
  const count = React.Children.count(children);

  return (
    <div className="carousel">
      {active > 0 && (
        <button className="nav left" onClick={() => setActive((i) => i - 1)}>
          &lt;
        </button>
      )}
      {React.Children.map(children, (child, i) => (
        <div
          className="card-container"
          style={{
            "--active": i === active ? 1 : 0,
            "--offset": (active - i) / 3,
            "--direction": Math.sign(active - i),
            "--abs-offset": Math.abs(active - i) / 3,
            pointerEvents: active === 1 ? "auto" : "none",
            opacity: Math.abs(active - i) >= MAX_VISIBILITY ? 0 : 1,
            display: Math.abs(active - i) > MAX_VISIBILITY ? "none" : "block",
          }}
        >
          {child}
        </div>
      ))}
      {active < count - 1 && (
        <button
          className="nav right"
          onClick={() => setActive((i) => i + 1)}
        >
          &gt;
        </button>
      )}
    </div>
  );
};

const App = () => (
  <div className="app">
    <Carousel>
      {[...Array(CARDS)].map((_, i) => (
        <Card
          key={i}
          title={"Card " + (i + 1)}
          content="This is a carousel effect"
        />
      ))}
    </Carousel>
  </div>
);

ReactDOM.render(<App />, document.getElementById('root'));



vSure, I can help you achieve that. To create a separate `Carousel.js` component and use it in your `App.js`, follow these steps:

1. **Create `Carousel.js` Component:**

Create a new file named `Carousel.js` in the same directory as your `App.js` and `Card.js` files. Define your `Carousel` component in this file:

```jsx
import React, { useState } from 'react';

const MAX_VISIBILITY = 3;

const Carousel = ({ children }) => {
  const [active, setActive] = useState(2);
  const count = React.Children.count(children);

  return (
    <div className="carousel">
      {active > 0 && (
        <button className="nav left" onClick={() => setActive((i) => i - 1)}>
          &lt;
        </button>
      )}
      {React.Children.map(children, (child, i) => (
        <div
          className="card-container"
          style={{
            "--active": i === active ? 1 : 0,
            "--offset": (active - i) / 3,
            "--direction": Math.sign(active - i),
            "--abs-offset": Math.abs(active - i) / 3,
            pointerEvents: active === 1 ? "auto" : "none",
            opacity: Math.abs(active - i) >= MAX_VISIBILITY ? 0 : 1,
            display: Math.abs(active - i) > MAX_VISIBILITY ? "none" : "block",
          }}
        >
          {child}
        </div>
      ))}
      {active < count - 1 && (
        <button
          className="nav right"
          onClick={() => setActive((i) => i + 1)}
        >
          &gt;
        </button>
      )}
    </div>
  );
};

export default Carousel;
```

2. **Use `Carousel` Component in `App.js`:**

In your `App.js`, import the `Carousel` component and use it to display images instead of cards:

```jsx
import React from 'react';
import './App.css';
import Carousel from './Carousel'; // Import the Carousel component

const IMAGES = [
  'image1.jpg',
  'image2.jpg',
  'image3.jpg',
  // Add more image URLs here
];

const App = () => (
  <div className="app">
    <Carousel>
      {IMAGES.map((image, index) => (
        <img
          key={index}
          src={image}
          alt={`Image ${index + 1}`}
          className="carousel-image"
        />
      ))}
    </Carousel>
  </div>
);

export default App;
```

3. **Style and Display Images:**

In your CSS (`App.css`), you can define styles for the carousel and images:

```css
/* App.css */
.app {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
}

.carousel {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
  width: 100%;
  max-width: 600px;
  margin: 0 auto;
}

.carousel-image {
  width: 100%;
  height: auto;
  max-height: 300px;
  object-fit: cover;
  transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
}

/* Other styles like navigation buttons, etc. */
```

Remember to replace the image URLs in the `IMAGES` array with the actual paths to your images.

With these steps, you should have a `Carousel` component that you can reuse in different parts of your app. The `App` component uses the `Carousel` component to display images. Just make sure your file paths and image URLs are correct.

